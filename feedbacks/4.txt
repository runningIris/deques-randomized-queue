See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 7 warnings)

Correctness:  23/43 tests passed
Memory:       27/30 tests passed
Timing:       136/193 tests passed

Aggregate score: 65.19%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.7K Apr  1 10:34 Deque.java
 452 Apr  1 10:34 Permutation.java
2.9K Apr  1 10:34 RandomizedQueue.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------

% javac RandomizedQueue.java
*-----------------------------------------------------------

% javac Permutation.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Deque.java:38:26: Inner assignments should be avoided. [InnerAssignment]
[WARN] Deque.java:53:26: Inner assignments should be avoided. [InnerAssignment]
[WARN] Permutation.java:5:29: '(' is preceded with whitespace. [MethodParamPad]
[WARN] RandomizedQueue.java:21:14: 'while' is not followed by whitespace. [WhitespaceAfter]
[WARN] RandomizedQueue.java:36:26: Inner assignments should be avoided. [InnerAssignment]
[WARN] RandomizedQueue.java:61:26: Inner assignments should be avoided. [InnerAssignment]
[WARN] RandomizedQueue.java:78:14: 'while' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 7 warnings.

% custom checkstyle checks for Deque.java
*-----------------------------------------------------------
[INFO] Deque.java:22: Using a loop in this method might be a performance bug. [Performance]

% custom checkstyle checks for RandomizedQueue.java
*-----------------------------------------------------------
[INFO] RandomizedQueue.java:21: Using a loop in this method might be a performance bug. [Performance]
[INFO] RandomizedQueue.java:78: Using a loop in this method might be a performance bug. [Performance]

% custom checkstyle checks for Permutation.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: check random calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
    - failed on operation 10 of 50
    - student   size() = 7
    - reference size() = 9
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.addFirst(2)
         deque.addFirst(3)
         deque.addLast(4)
         deque.addFirst(5)
         deque.addLast(6)
         deque.addFirst(7)
         deque.addLast(8)
         deque.addFirst(9)
         deque.size()            ==> 7

  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
    - failed on operation 9 of 500
    - student   size() = 7
    - reference size() = 8
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.addFirst(2)
         deque.addFirst(3)
         deque.addFirst(4)
         deque.addLast(5)
         deque.addFirst(6)
         deque.addLast(7)
         deque.addFirst(8)
         deque.size()            ==> 7

  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
    - failed on operation 12 of 1000
    - student   size() = 7
    - reference size() = 11

==> FAILED

Test 2: check random calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 3: check random calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
    java.lang.NullPointerException

    Deque.removeLast(Deque.java:74)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:470)
    TestDeque.main(TestDeque.java:847)


  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
    java.lang.NullPointerException

    Deque.removeLast(Deque.java:74)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:471)
    TestDeque.main(TestDeque.java:847)


  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
    java.lang.NullPointerException

    Deque.removeLast(Deque.java:74)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:472)
    TestDeque.main(TestDeque.java:847)


  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    java.lang.NullPointerException

    Deque.removeLast(Deque.java:74)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:474)
    TestDeque.main(TestDeque.java:847)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.addFirst(6)
         deque.addFirst(7)
         deque.removeLast()      ==> 6
         deque.removeLast()

  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 3 of 500
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()      ==> 1
         deque.isEmpty()         ==> false

  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    java.lang.NullPointerException

    Deque.removeLast(Deque.java:74)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:476)
    TestDeque.main(TestDeque.java:847)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()      ==> 1
         deque.addFirst(3)
         deque.removeLast()

==> FAILED

Test 4: check random calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
    - failed on operation 11 of 50
    - student   removeLast() = 1
    - reference removeLast() = 10
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.addLast(2)
         deque.addLast(3)
         deque.addLast(4)
         deque.addLast(5)
         deque.addLast(6)
         deque.addLast(7)
         deque.addLast(8)
         deque.addLast(9)
         deque.addLast(10)
         deque.removeLast()      ==> 1

  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
    - failed on operation 3 of 500
    - student   removeLast() = 1
    - reference removeLast() = 2
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.addLast(2)
         deque.removeLast()      ==> 1

  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
    - failed on operation 7 of 1000
    - student   removeLast() = 1
    - reference removeLast() = 6
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.addLast(2)
         deque.addLast(3)
         deque.addLast(4)
         deque.addLast(5)
         deque.addLast(6)
         deque.removeLast()      ==> 1

  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    java.lang.NullPointerException

    Deque.addLast(Deque.java:55)
    TestDeque.random(TestDeque.java:77)
    TestDeque.test4(TestDeque.java:489)
    TestDeque.main(TestDeque.java:848)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.addLast(2)
         deque.removeLast()      ==> 2
         deque.addLast(4)

  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 7 of 50
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.addLast(5)
         deque.removeLast()      ==> 5
         deque.isEmpty()         ==> false

  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    java.lang.NullPointerException

    Deque.addLast(Deque.java:55)
    TestDeque.random(TestDeque.java:77)
    TestDeque.test4(TestDeque.java:491)
    TestDeque.main(TestDeque.java:848)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.removeLast()      ==> 1
         deque.addLast(3)

  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 3 of 1000
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.removeLast()      ==> 1
         deque.isEmpty()         ==> false

==> FAILED

Test 5: check random calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
    - failed on operation 19 of 50
    - student   removeFirst() = 8
    - reference removeFirst() = 2

  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
    - failed on operation 36 of 500
    - student   removeFirst() = 19
    - reference removeFirst() = 3

  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
    - failed on operation 18 of 1000
    - student   removeFirst() = 7
    - reference removeFirst() = 3

  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
    - failed on operation 32 of 50
    - student   removeFirst() = 29
    - reference removeFirst() = 27

  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
    - failed on operation 118 of 500
    - student   removeFirst() = 116
    - reference removeFirst() = 115

  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
    java.util.NoSuchElementException: no item to be removed in the deque

    Deque.removeFirst(Deque.java:61)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test5(TestDeque.java:508)
    TestDeque.main(TestDeque.java:849)


==> FAILED

Test 6: check random calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size()
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 9 of 50
    - student   removeLast() = 1
    - reference removeLast() = 6
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.addLast(2)
         deque.addFirst(3)
         deque.addFirst(4)
         deque.addLast(5)
         deque.addLast(6)
         deque.addFirst(7)
         deque.addFirst(8)
         deque.removeLast()      ==> 1

  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 7 of 500
    - student   removeLast() = 1
    - reference removeLast() = 6
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.isEmpty()         ==> false
         deque.size()            ==> 1
         deque.addFirst(4)
         deque.addLast(5)
         deque.addLast(6)
         deque.removeLast()      ==> 1

  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
    java.lang.NullPointerException

    Deque.addLast(Deque.java:55)
    TestDeque.random(TestDeque.java:77)
    TestDeque.test6(TestDeque.java:522)
    TestDeque.main(TestDeque.java:850)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()      ==> 1
         deque.addLast(3)

  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    java.lang.NullPointerException

    Deque.addLast(Deque.java:55)
    TestDeque.random(TestDeque.java:77)
    TestDeque.test6(TestDeque.java:524)
    TestDeque.main(TestDeque.java:850)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.size()            ==> 0
         deque.isEmpty()         ==> true
         deque.addFirst(3)
         deque.removeFirst()     ==> 3
         deque.addLast(5)
         deque.size()            ==> 1
         deque.addFirst(7)
         deque.removeLast()      ==> 5
         deque.addLast(9)

  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 6 of 500
    - student   isEmpty() = false
    - reference isEmpty() = true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeFirst()     ==> 1
         deque.isEmpty()         ==> true
         deque.addLast(4)
         deque.removeLast()      ==> 4
         deque.isEmpty()         ==> false

  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    java.lang.NullPointerException

    Deque.addLast(Deque.java:55)
    TestDeque.random(TestDeque.java:77)
    TestDeque.test6(TestDeque.java:526)
    TestDeque.main(TestDeque.java:850)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.removeLast()      ==> 1
         deque.addLast(3)

==> FAILED

Test 7: check removeFirst() and removeLast() from an empty deque
  * removeFirst()
  * removeLast()
==> passed

Test 8: check whether two Deque objects can be created at the same time
  * n = 10
  * n = 1000
==> passed

Test 9: check iterator() after n calls to addFirst()
  * n = 10
  * n = 50
==> passed

Test 10: check iterator() after each of m intermixed calls to
         addFirst(), addLast(), removeFirst(), and removeLast()
  * m = 20
    - number of student   entries = 4
    - number of reference entries = 5
    - entry 3 of the two sequences are not equal
    - student   entry 3 = 7
    - reference entry 3 = 4
    - iterator() failed after applying operation 7
    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addLast(1)
         deque.removeFirst()   ==> 1
         deque.addLast(3)
         deque.addLast(4)
         deque.addFirst(5)
         deque.addFirst(6)
         deque.addLast(7)

  * m = 50
    - number of student   entries = 3
    - number of reference entries = 4
    - entry 2 of the two sequences are not equal
    - student   entry 2 = 6
    - reference entry 2 = 4
    - iterator() failed after applying operation 6
    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeFirst()   ==> 1
         deque.addLast(3)
         deque.addLast(4)
         deque.addFirst(5)
         deque.addLast(6)

  * m = 100
    - number of student   entries = 1
    - number of reference entries = 0
    - iterator() failed after applying operation 2
    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()    ==> 1

  * m = 1000
    - number of student   entries = 1
    - number of reference entries = 0
    - iterator() failed after applying operation 2
    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()    ==> 1

==> FAILED

Test 11: create two nested iterators to same deque
  * n = 10
    - size() returns wrong value
    - student   size() = 2
    - reference size() = 3

    - failed on 2th addFirst() operation in deque

  * n = 50
    - size() returns wrong value
    - student   size() = 2
    - reference size() = 3

    - failed on 2th addFirst() operation in deque

==> FAILED

Test 12: create two parallel iterators to same deque
    - size() returns wrong value
    - student   size() = 2
    - reference size() = 3

    - failed on call 2 to addLast()

    - size() returns wrong value
    - student   size() = 2
    - reference size() = 3

    - failed on call 2 to addLast()

==> FAILED

Test 13: create Deque objects of different parameterized types
==> passed

Test 14: call addFirst() and addLast() with null argument
==> passed

Test 15: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 16: call iterator() when the deque is empty
==> passed


Total: 8/16 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
==> passed

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
    - failed on operation 36 of 50
    - student   size() = 7
    - reference size() = 30

  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
    - failed on operation 29 of 500
    - student   size() = 18
    - reference size() = 23

  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
    - failed on operation 25 of 1000
    - student   size() = 1
    - reference size() = 19

  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
    java.util.NoSuchElementException: no more items to return in the sample() method.

    RandomizedQueue.sample(RandomizedQueue.java:54)
    TestRandomizedQueue.random(TestRandomizedQueue.java:152)
    TestRandomizedQueue.test3(TestRandomizedQueue.java:764)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1192)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.enqueue(3)
         rq.sample()      ==> 3
         rq.sample()

  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
    java.util.NoSuchElementException: no more items to return in the sample() method.

    RandomizedQueue.sample(RandomizedQueue.java:54)
    TestRandomizedQueue.random(TestRandomizedQueue.java:152)
    TestRandomizedQueue.test3(TestRandomizedQueue.java:765)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1192)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.enqueue(0)
         rq.enqueue(9)
         rq.sample()      ==> 9
         rq.sample()      ==> 0
         rq.sample()

  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
    java.util.NoSuchElementException: no more items to return in the sample() method.

    RandomizedQueue.sample(RandomizedQueue.java:54)
    TestRandomizedQueue.random(TestRandomizedQueue.java:152)
    TestRandomizedQueue.test3(TestRandomizedQueue.java:766)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1192)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.enqueue(93)
         rq.sample()      ==> 93
         rq.sample()

  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
    java.util.NoSuchElementException: no more items to return in the sample() method.

    RandomizedQueue.sample(RandomizedQueue.java:54)
    TestRandomizedQueue.random(TestRandomizedQueue.java:152)
    TestRandomizedQueue.test3(TestRandomizedQueue.java:767)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1192)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.size()        ==> 0
         rq.enqueue(580)
         rq.sample()      ==> 580
         rq.enqueue(791)
         rq.sample()      ==> 791
         rq.sample()

==> FAILED

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
    java.util.NoSuchElementException: no more items to return in the sample() method.

    RandomizedQueue.sample(RandomizedQueue.java:54)
    TestRandomizedQueue.random(TestRandomizedQueue.java:152)
    TestRandomizedQueue.test4(TestRandomizedQueue.java:775)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1195)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.enqueue(18)
         rq.isEmpty()     ==> false
         rq.sample()      ==> 18
         rq.sample()

  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 6 of 500
    - student   size() = 3
    - reference size() = 4

    - sequence of randomized queue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.enqueue(372)
         rq.enqueue(192)
         rq.enqueue(11)
         rq.enqueue(207)
         rq.sample()      ==> 192
         rq.size()        ==> 3
  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 15 of 1000
    - student   size() = 7
    - reference size() = 8

  *    5 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
    java.util.NoSuchElementException: no more items to return in the dequeue() method.

    RandomizedQueue.dequeue(RandomizedQueue.java:45)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test4(TestRandomizedQueue.java:778)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1195)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.enqueue(0)
         rq.enqueue(4)
         rq.sample()      ==> 0
         rq.sample()      ==> 4
         rq.dequeue()

  *   50 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *  500 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
    java.util.NoSuchElementException: no more items to return in the dequeue() method.

    RandomizedQueue.dequeue(RandomizedQueue.java:45)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test4(TestRandomizedQueue.java:780)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1195)

  * 1000 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
    java.util.NoSuchElementException: no more items to return in the dequeue() method.

    RandomizedQueue.dequeue(RandomizedQueue.java:45)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test4(TestRandomizedQueue.java:781)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1195)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.enqueue(802)
         rq.dequeue()     ==> 802
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.enqueue(284)
         rq.dequeue()     ==> 284
         rq.enqueue(988)
         rq.dequeue()     ==> 988
         rq.enqueue(732)
         rq.sample()      ==> 732
         rq.dequeue()

==> FAILED

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
  * sample()
==> passed

Test 6: create multiple randomized queue objects at the same time
  * n = 10
  * n = 100
==> passed

Test 7: check that iterator() returns correct items after a sequence
        of n enqueue() operations
  * n = 10
  * n = 50
==> passed

Test 8: check that iterator() returns correct items after sequence
        of m enqueue() and dequeue() operations
  * m = 10
  * m = 1000
==> passed

Test 9: create two nested iterators over the same randomized queue
  * n = 10
    - two inner iterators return the same sequence of items
    - they should return the same set of items but in a
      different order

  * n = 50
    - two inner iterators return the same sequence of items
    - they should return the same set of items but in a
      different order

==> FAILED

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
    - two iterators return the same sequence of values
    - they should return the same set of values but in a
      different order

  * n = 50
    - two iterators return the same sequence of values
    - they should return the same set of values but in a
      different order

==> FAILED

Test 11: create two iterators over different randomized queues
==> passed

Test 12: create RandomizedQueue objects of different parameterized types
==> passed

Test 13: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000
    java.util.NoSuchElementException: no more items to return in the sample() method.

    RandomizedQueue.sample(RandomizedQueue.java:54)
    TestRandomizedQueue.checkRandomnessOfSample(TestRandomizedQueue.java:508)
    TestRandomizedQueue.test13(TestRandomizedQueue.java:999)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1222)

  * n = 5, trials = 12000
    java.util.NoSuchElementException: no more items to return in the sample() method.

    RandomizedQueue.sample(RandomizedQueue.java:54)
    TestRandomizedQueue.checkRandomnessOfSample(TestRandomizedQueue.java:508)
    TestRandomizedQueue.test13(TestRandomizedQueue.java:1000)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1222)

  * n = 8, trials = 12000
    java.util.NoSuchElementException: no more items to return in the sample() method.

    RandomizedQueue.sample(RandomizedQueue.java:54)
    TestRandomizedQueue.checkRandomnessOfSample(TestRandomizedQueue.java:508)
    TestRandomizedQueue.test13(TestRandomizedQueue.java:1001)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1222)

  * n = 10, trials = 12000
    java.util.NoSuchElementException: no more items to return in the sample() method.

    RandomizedQueue.sample(RandomizedQueue.java:54)
    TestRandomizedQueue.checkRandomnessOfSample(TestRandomizedQueue.java:508)
    TestRandomizedQueue.test13(TestRandomizedQueue.java:1002)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1222)

==> FAILED

Test 14: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
               AB     12000    6000.0      16635.53
               BA         0    6000.0          0.00
        -------------------------------------------
                      12000   12000.0      16635.53

    G-statistic = 16635.53 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 3, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
              ABC     12000    2000.0      43002.23
              ACB         0    2000.0          0.00
              BAC         0    2000.0          0.00
              BCA         0    2000.0          0.00
              CAB         0    2000.0          0.00
              CBA         0    2000.0          0.00
        -------------------------------------------
                      12000   12000.0      43002.23

    G-statistic = 43002.23 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 4, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
             ABCD     12000     500.0      76273.29
             ABDC         0     500.0          0.00
             ACBD         0     500.0          0.00
             ACDB         0     500.0          0.00
             ADBC         0     500.0          0.00
             ADCB         0     500.0          0.00
             BACD         0     500.0          0.00
             BADC         0     500.0          0.00
             BCAD         0     500.0          0.00
             BCDA         0     500.0          0.00
             BDAC         0     500.0          0.00
             BDCA         0     500.0          0.00
             CABD         0     500.0          0.00
             CADB         0     500.0          0.00
             CBAD         0     500.0          0.00
             CBDA         0     500.0          0.00
             CDAB         0     500.0          0.00
             CDBA         0     500.0          0.00
             DABC         0     500.0          0.00
             DACB         0     500.0          0.00
             DBAC         0     500.0          0.00
             DBCA         0     500.0          0.00
             DCAB         0     500.0          0.00
             DCBA         0     500.0          0.00
        -------------------------------------------
                      12000   12000.0      76273.29

    G-statistic = 76273.29 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 5, trials = 12000

==> FAILED

Test 15: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
               AB     12000    6000.0      16635.53
               BA         0    6000.0          0.00
        -------------------------------------------
                      12000   12000.0      16635.53

    G-statistic = 16635.53 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 3, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
              ABC     12000    2000.0      43002.23
              ACB         0    2000.0          0.00
              BAC         0    2000.0          0.00
              BCA         0    2000.0          0.00
              CAB         0    2000.0          0.00
              CBA         0    2000.0          0.00
        -------------------------------------------
                      12000   12000.0      43002.23

    G-statistic = 43002.23 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 4, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
             ABCD     12000     500.0      76273.29
             ABDC         0     500.0          0.00
             ACBD         0     500.0          0.00
             ACDB         0     500.0          0.00
             ADBC         0     500.0          0.00
             ADCB         0     500.0          0.00
             BACD         0     500.0          0.00
             BADC         0     500.0          0.00
             BCAD         0     500.0          0.00
             BCDA         0     500.0          0.00
             BDAC         0     500.0          0.00
             BDCA         0     500.0          0.00
             CABD         0     500.0          0.00
             CADB         0     500.0          0.00
             CBAD         0     500.0          0.00
             CBDA         0     500.0          0.00
             CDAB         0     500.0          0.00
             CDBA         0     500.0          0.00
             DABC         0     500.0          0.00
             DACB         0     500.0          0.00
             DBAC         0     500.0          0.00
             DBCA         0     500.0          0.00
             DCAB         0     500.0          0.00
             DCBA         0     500.0          0.00
        -------------------------------------------
                      12000   12000.0      76273.29

    G-statistic = 76273.29 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 5, trials = 12000

==> FAILED

Test 16: call enqueue() with a null argument
==> passed

Test 17: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 18: call iterator() when randomized queue is empty
==> passed


Total: 11/18 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque)
********************************************************************************

Testing correctness of Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java Permutation 3 < distinct.txt
  E
  B
  A

  % java Permutation 3 < distinct.txt
  F
  G
  E

  % java Permutation 8 < duplicates.txt
  AA
  AA
  CC
  BB
  BB
  BB
  CC
  BB

==> passed

Test 1b: check formatting for other inputs
  % java Permutation 8 < mediumTale.txt
  wisdom
  it
  of
  times
  wisdom
  times
  best
  age

  % java Permutation 0 < distinct.txt
  [no output]

==> passed

Test 2: check that main() reads all data from standard input
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 3
  * filename = duplicates.txt, k = 8
  * filename = mediumTale.txt, k = 8
==> passed

Test 3a: check that main() prints each item from the sequence at most once
         (for inputs with no duplicate strings)
  * filename = distinct.txt, k = 3
    - number of times student prints string "F"   = 2
    - number of times string "F" appears in input = 1
    - failed on trial 8 of 1000

  * filename = distinct.txt, k = 1
  * filename = distinct.txt, k = 9
    - number of times student prints string "B"   = 2
    - number of times string "B" appears in input = 1
    - failed on trial 1 of 1000

  * filename = permutation6.txt, k = 6
    - number of times student prints string "A"   = 2
    - number of times string "A" appears in input = 1
    - failed on trial 1 of 1000

  * filename = permutation10.txt, k = 10
    - number of times student prints string "B"   = 2
    - number of times string "B" appears in input = 1
    - failed on trial 1 of 1000

==> FAILED

Test 3b: check that main() prints each item from the sequence at most once
         (for inputs with duplicate strings)
  * filename = duplicates.txt, k = 8
    - number of times student prints string "BB"   = 6
    - number of times string "BB" appears in input = 5
    - failed on trial 1 of 1000

  * filename = duplicates.txt, k = 3
    - number of times student prints string "AA"   = 3
    - number of times string "AA" appears in input = 1
    - failed on trial 28 of 1000

  * filename = permutation8.txt, k = 6
    - number of times student prints string "C"   = 6
    - number of times string "C" appears in input = 4
    - failed on trial 1 of 1000

  * filename = permutation8.txt, k = 2
    - number of times student prints string "B"   = 2
    - number of times string "B" appears in input = 1
    - failed on trial 14 of 1000

  * filename = tinyTale.txt, k = 10
    - number of times student prints string "worst"   = 2
    - number of times string "worst" appears in input = 1
    - failed on trial 1 of 1000

==> FAILED

Test 3c: check that main() prints each item from the sequence at most once
         (for inputs with newlines)
  * filename = mediumTale.txt, k = 10
    - number of times student prints string "times"   = 3
    - number of times string "times" appears in input = 2
    - failed on trial 1 of 1000

  * filename = mediumTale.txt, k = 20
    - number of times student prints string "best"   = 2
    - number of times string "best" appears in input = 1
    - failed on trial 1 of 1000

  * filename = tale.txt, k = 10
  * filename = tale.txt, k = 50
==> FAILED

Test 4: check main() when k = 0
  * filename = distinct.txt, k = 0
  * filename = distinct.txt, k = 0
==> passed

Test 5a: check that permutations are uniformly random
         (for inputs with no duplicate strings)
  * filename = permutation4.txt, k = 1
  * filename = permutation4.txt, k = 2
    - student prints an invalid permutation:
      D D
    - failed on trial 8 of 1000

  * filename = permutation4.txt, k = 3
    - student prints an invalid permutation:
      C B B
    - failed on trial 1 of 1000

  * filename = permutation4.txt, k = 4
    - student prints an invalid permutation:
      C D A A
    - failed on trial 1 of 1000

  * filename = permutation6.txt, k = 2
    - student prints an invalid permutation:
      B B
    - failed on trial 10 of 1000

==> FAILED

Test 5b: check that permutations are uniformly random
         (for inputs with duplicate strings)
  * filename = permutation5.txt, k = 1
  * filename = permutation5.txt, k = 2

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
              A A       389     300.0        202.12
              A B       224     300.0       -130.88
              B A       226     300.0       -128.03
              B B       161     100.0        153.35
        -------------------------------------------
                       1000    1000.0         96.56

    G-statistic = 96.56 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * filename = permutation5.txt, k = 3
    - student prints an invalid permutation:
      B B B
    - failed on trial 10 of 1000

  * filename = duplicates.txt, k = 3
    - student prints an invalid permutation:
      AA AA BB
    - failed on trial 13 of 1000

  * filename = permutation8.txt, k = 2
    - student prints an invalid permutation:
      B B
    - failed on trial 8 of 1000

==> FAILED

Total: 4/9 tests passed!


================================================================
********************************************************************************
*  TIMING (substituting reference RandomizedQueue and Deque)
********************************************************************************

Timing Permutation
*-----------------------------------------------------------
Running 23 total tests.

Test 1: count calls to methods in StdIn
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 2: count calls to methods in Deque and RandomizedQueue
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 3: count calls to methods in StdRandom
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 4: Time main() with k = 5, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.01
=> passed       16000     0.01
=> passed       32000     0.01
=> passed       64000     0.02
=> passed      128000     0.05
=> passed      256000     0.24
=> passed      512000     0.25
==> 10/10 tests passed


Test 5: Time main() with k = 1000, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.00
=> passed       16000     0.01
=> passed       32000     0.01
=> passed       64000     0.02
=> passed      128000     0.05
=> passed      256000     0.09
=> passed      512000     0.18
==> 10/10 tests passed


Total: 23/23 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check that only one Deque or RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 50
==> passed

Test 2: check that the maximum size of any Deque or RandomizedQueue object
        created is between k and n
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 5
  * filename = tale.txt, n = 138653, k = 50
  * filename = tale.txt, n = 138653, k = 500
  * filename = tale.txt, n = 138653, k = 5000
  * filename = tale.txt, n = 138653, k = 50000
==> passed

Test 3 (bonus): check that maximum size of any or Deque or RandomizedQueue object
                created is equal to k
  * filename = tale.txt, n = 138653, k = 5
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 500
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 5000
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50000
    - max size of RandomizedQueue object = 138653

==> FAILED

Total: 2/2 tests passed!

================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a Deque
containing n items is 48n + 192.

Running 28 total tests.

Test 1a-1e: Total memory usage after inserting n items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          352
=> passed       64         2592
=> passed      256        10272
=> passed     1024        40992
=> passed     4096       163872
==> 5/5 tests passed

Memory: 40.00 n + 32.00   (R^2 = 1.000)



Test 2a-2e: Total memory usage after inserting n+1 items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          392
=> passed       64         2632
=> passed      256        10312
=> passed     1024        41032
=> passed     4096       163912
==> 5/5 tests passed

Memory after adding n = 2^i + 1 items: 40.00 n + 32.00   (R^2 = 1.000)



Test 3a-3e: Total memory usage after inserting 2n+1 items
            and deleting n items, where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          392
=> passed       64         2632
=> passed      256        10312
=> passed     1024        41032
=> passed     4096       163912
==> 5/5 tests passed

Memory: 40.00 n + 32.00   (R^2 = 1.000)



Test 4a-4e: Total memory usage after inserting n items and then
            deleting all but one item, where n is a power of 2.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=> passed        8           72
=> passed       64           72
=> passed      256           72
=> passed     1024           72
=> passed     4096           72
==> 5/5 tests passed

Memory after adding n = 2^i items: 72.00   (R^2 = 1.000)



Test 5a-5e: Total memory usage of iterator after inserting n items.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=> passed        8           32
=> passed       64           32
=> passed      256           32
=> passed     1024           32
=> passed     4096           32
==> 5/5 tests passed

Memory of iterator after adding n = 2^i items: 32.00   (R^2 = 1.000)



Test 6a: Insert n strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)
    - loitering observed during 1 of 100 deletions
    - maximum number of loitered objects at one time = 1
  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)
    java.lang.NullPointerException

    Deque.removeLast(Deque.java:74)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:458)
    MemoryOfDeque.test6a(MemoryOfDeque.java:508)
    MemoryOfDeque.main(MemoryOfDeque.java:746)

  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)
    java.util.NoSuchElementException: no item to be removed in the deque

    Deque.removeFirst(Deque.java:61)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:457)
    MemoryOfDeque.test6a(MemoryOfDeque.java:509)
    MemoryOfDeque.main(MemoryOfDeque.java:746)

  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)
    java.lang.NullPointerException

    Deque.removeLast(Deque.java:74)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:458)
    MemoryOfDeque.test6a(MemoryOfDeque.java:510)
    MemoryOfDeque.main(MemoryOfDeque.java:746)

  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)
    java.lang.NullPointerException

    Deque.removeLast(Deque.java:74)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:458)
    MemoryOfDeque.test6a(MemoryOfDeque.java:511)
    MemoryOfDeque.main(MemoryOfDeque.java:746)

==> FAILED

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)
  * 100 random operations (0.8, 0.0, 0.0, 0.2)
    - loitering detected after operation 8 of 100
    - sequence of operations was:
         deque.addFirst("LORLUAHEER")
         deque.addFirst("KEQLCUVRVY")
         deque.addFirst("XHXSWEVNWP")
         deque.addFirst("JWEGRTGKPA")
         deque.addFirst("VVWXHJEMBR")
         deque.addFirst("JSATYNTMNI")
         deque.addFirst("SJAUCWZOHW")
         deque.removeLast()      ==> LORLUAHEER
    - loitered object(s):
      LORLUAHEER

  * 100 random operations (0.0, 0.8, 0.2, 0.0)
    - loitering detected after operation 8 of 100
    - sequence of operations was:
         deque.addLast("WVBHZVGWBZ")
         deque.addLast("QZEJDWXSMO")
         deque.addLast("BAQRJHYNXJ")
         deque.addLast("GSWBJQIEPQ")
         deque.addLast("DDKOYPBHLC")
         deque.addLast("QIJMCCWSJM")
         deque.addLast("HVCCIGTRNA")
         deque.removeFirst()     ==> WVBHZVGWBZ
    - loitered object(s):
      WVBHZVGWBZ

  * 100 random operations (0.0, 0.8, 0.0, 0.2)
    - loitering detected after operation 13 of 100
  * 100 random operations (0.4, 0.4, 0.1, 0.1)
    - loitering detected after operation 4 of 100
    - sequence of operations was:
         deque.addLast("MBRGQPMDDK")
         deque.addLast("AQHZNJQDJK")
         deque.addLast("SSPRXVMSNS")
         deque.removeLast()      ==> MBRGQPMDDK
    - loitered object(s):
      MBRGQPMDDK

  * 100 random operations (0.2, 0.2, 0.3, 0.3)
    - loitering detected after operation 2 of 100
    - sequence of operations was:
         deque.addFirst("VTMKOXKSHS")
         deque.removeFirst()     ==> VTMKOXKSHS
    - loitered object(s):
      VTMKOXKSHS

==> FAILED

Test 7: Worst-case constant memory allocated or deallocated
        per deque operation?
  * 128 random operations
    java.lang.NullPointerException

    Deque.addLast(Deque.java:55)
    MemoryOfDeque.constant(MemoryOfDeque.java:661)
    MemoryOfDeque.test7(MemoryOfDeque.java:711)
    MemoryOfDeque.main(MemoryOfDeque.java:748)

  * 256 random operations
    java.lang.NullPointerException

    Deque.addLast(Deque.java:55)
    MemoryOfDeque.constant(MemoryOfDeque.java:661)
    MemoryOfDeque.test7(MemoryOfDeque.java:712)
    MemoryOfDeque.main(MemoryOfDeque.java:748)

  * 512 random operations
    java.lang.NullPointerException

    Deque.addLast(Deque.java:55)
    MemoryOfDeque.constant(MemoryOfDeque.java:661)
    MemoryOfDeque.test7(MemoryOfDeque.java:713)
    MemoryOfDeque.main(MemoryOfDeque.java:748)

==> FAILED

Total: 25/28 tests passed!

================================================================



Analyzing memory of RandomizedQueue
*-----------------------------------------------------------
For tests 1-5, the maximum amount of memory allowed for
a RandomizedQueue containing n items is 48n + 192.

Test 1a-1i: Total memory usage after inserting n items
            when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32         1312
=> passed       64         2592
=> passed      128         5152
=> passed      256        10272
=> passed      512        20512
=> passed     1024        40992
=> passed     2048        81952
=> passed     4096       163872
=> passed     8192       327712
==> 9/9 tests passed

Memory: 40.00 n + 32.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1352
=> passed       65         2632
=> passed      129         5192
=> passed      257        10312
=> passed      513        20552
=> passed     1025        41032
=> passed     2049        81992
=> passed     4097       163912
=> passed     8193       327752
==> 9/9 tests passed

Memory: 40.00 n + 32.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1352
=> passed       65         2632
=> passed      129         5192
=> passed      257        10312
=> passed      513        20552
=> passed     1025        41032
=> passed     2049        81992
=> passed     4097       163912
=> passed     8193       327752
==> 9/9 tests passed

Memory: 40.00 n + 32.00   (R^2 = 1.000)


Test 4a-4i: Total memory usage after inserting n items, deleting n items,
            then inserting n times, when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32         1312
=> passed       64         2592
=> passed      128         5152
=> passed      256        10272
=> passed      512        20512
=> passed     1024        40992
=> passed     2048        81952
=> passed     4096       163872
=> passed     8192       327712
==> 9/9 tests passed

Memory: 40.00 n + 32.00   (R^2 = 1.000)


Test 5a-5i: Total memory usage after inserting n items,
            and then deleting all but one item.

                 n        bytes
----------------------------------------------------------
=> passed       32           72
=> passed       64           72
=> passed      128           72
=> passed      256           72
=> passed      512           72
=> passed     1024           72
=> passed     2048           72
=> passed     4096           72
=> passed     8192           72
==> 9/9 tests passed

Memory: 72.00   (R^2 = 1.000)


Test 6a-6d: Total memory usage of iterator after inserting n items.

                 n        bytes
----------------------------------------------------------
=> passed       32           32
=> passed       64           32
=> passed      128           32
=> passed      256           32
=> passed      512           32
=> passed     1024           32
=> passed     2048           32
=> passed     4096           32
=> passed     8192           32
==> 9/9 tests passed

Memory: 32.00   (R^2 = 1.000)


Test 7a: Insert 100 strings; delete them one at a time, checking
         for loitering after each deletion.
    - loitering observed during 1 of 100 deletions
    - maximum number of loitered objects at one time = 1

==> FAILED

Test 7b: Perform random operations, checking for loitering after
         each operation. The probabilities of enqueue(), dequeue(),
         and sample() are (p1, p2, p3), respectively.
  * 200 random operations (0.8, 0.2, 0.0)
  * 200 random operations (0.2, 0.8, 0.0)
    - loitering detected after operation 2 of 200
    - sequence of operations was:
         rq.enqueue("BBTHELLFDC")
         rq.dequeue()     ==> "BBTHELLFDC"
    - loitered object(s):
      BBTHELLFDC

  * 200 random operations (0.6, 0.2, 0.2)
    java.util.NoSuchElementException: no more items to return in the dequeue() method.

    RandomizedQueue.dequeue(RandomizedQueue.java:45)
    MemoryOfRandomizedQueue.loiter(MemoryOfRandomizedQueue.java:397)
    MemoryOfRandomizedQueue.test7b(MemoryOfRandomizedQueue.java:532)
    MemoryOfRandomizedQueue.main(MemoryOfRandomizedQueue.java:741)

    - sequence of operations was:
         rq.enqueue("TQWDIIKSRM")
         rq.enqueue("XXDRQOYWNT")
         rq.sample()      ==> "XXDRQOYWNT"
         rq.enqueue("XAAMQOPISA")
         rq.dequeue()     ==> "TQWDIIKSRM"
         rq.dequeue()

  * 200 random operations (0.2, 0.4, 0.4)
    java.util.NoSuchElementException: n

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.